Using network 'development'.

Compiling ./contracts/IRefundHandler.sol...
Compiling ./contracts/LOCISale.sol...
Compiling ./contracts/LOCIcoin.sol...
Compiling ./test/helpers/MockSale.sol...
Compiling ./test/helpers/MockToken.sol...
Compiling zeppelin-solidity/contracts/lifecycle/Pausable.sol...
Compiling zeppelin-solidity/contracts/math/SafeMath.sol...
Compiling zeppelin-solidity/contracts/ownership/Contactable.sol...
Compiling zeppelin-solidity/contracts/ownership/Ownable.sol...
Compiling zeppelin-solidity/contracts/token/BasicToken.sol...
Compiling zeppelin-solidity/contracts/token/ERC20.sol...
Compiling zeppelin-solidity/contracts/token/ERC20Basic.sol...
Compiling zeppelin-solidity/contracts/token/StandardToken.sol...

Compilation warnings encountered:

zeppelin-solidity/contracts/ownership/Ownable.sol:20:3: Warning: No visibility specified. Defaulting to "public".
  function Ownable() {
  ^
Spanning multiple lines.
,zeppelin-solidity/contracts/token/StandardToken.sol:73:3: Warning: No visibility specified. Defaulting to "public".
  function increaseApproval (address _spender, uint _addedValue)
  ^
Spanning multiple lines.
,zeppelin-solidity/contracts/token/StandardToken.sol:80:3: Warning: No visibility specified. Defaulting to "public".
  function decreaseApproval (address _spender, uint _subtractedValue)
  ^
Spanning multiple lines.
,/Users/demmons/sandbox/locicoin/test/helpers/MockSale.sol:7:5: Warning: No visibility specified. Defaulting to "public".
    function MockSale(
    ^
Spanning multiple lines.
,/Users/demmons/sandbox/locicoin/test/helpers/MockToken.sol:7:5: Warning: No visibility specified. Defaulting to "public".
    function MockToken(uint256 _totalSupply) LOCIcoin(_totalSupply){}
    ^---------------------------------------------------------------^
,/Users/demmons/sandbox/locicoin/contracts/LOCISale.sol:126:14: Warning: Unused local variable.
        var (the_end, the_rate, the_round) = determineDiscountTranche();
             ^-----^
,/Users/demmons/sandbox/locicoin/contracts/LOCISale.sol:126:33: Warning: Unused local variable.
        var (the_end, the_rate, the_round) = determineDiscountTranche();
                                ^-------^
,/Users/demmons/sandbox/locicoin/contracts/LOCISale.sol:213:14: Warning: Unused local variable.
        var (the_end, the_rate, the_round) = determineDiscountTranche();
             ^-----^
,/Users/demmons/sandbox/locicoin/test/helpers/MockSale.sol:30:9: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
        determineDiscountRate(); // just to trigger the check and update
        ^---------------------^
,/Users/demmons/sandbox/locicoin/test/helpers/MockSale.sol:34:9: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
        determineDiscountRate(); // just to trigger the check and update
        ^---------------------^
,/Users/demmons/sandbox/locicoin/test/helpers/MockSale.sol:38:9: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
        determineDiscountRate(); // just to trigger the check and update
        ^---------------------^
,zeppelin-solidity/contracts/math/SafeMath.sol:9:3: Warning: Function state mutability can be restricted to pure
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
  ^
Spanning multiple lines.
,zeppelin-solidity/contracts/math/SafeMath.sol:15:3: Warning: Function state mutability can be restricted to pure
  function div(uint256 a, uint256 b) internal constant returns (uint256) {
  ^
Spanning multiple lines.
,zeppelin-solidity/contracts/math/SafeMath.sol:22:3: Warning: Function state mutability can be restricted to pure
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
  ^
Spanning multiple lines.
,zeppelin-solidity/contracts/math/SafeMath.sol:27:3: Warning: Function state mutability can be restricted to pure
  function add(uint256 a, uint256 b) internal constant returns (uint256) {
  ^
Spanning multiple lines.


[0m[0m
[0m  Contract: Sale Tests[0m
[0m    Contract: LOCISale tranche roundTokensSold cap moves us to the next trancheDiscount[0m
    [32m  âœ“[0m[90m should have a peggedETHUSD[0m[31m (111ms)[0m
    [32m  âœ“[0m[90m should have the correct initial settings[0m[31m (333ms)[0m
    [32m  âœ“[0m[90m should have sane discount tranche values[0m[31m (461ms)[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (232ms)[0m
    [32m  âœ“[0m[90m should throw exception when less than minimum contribution[0m[31m (336ms)[0m
    [32m  âœ“[0m[90m should throw exception when less than minimum contribution[0m[31m (348ms)[0m
    [32m  âœ“[0m[90m should allow purchase of 14300 Ether @ 33 cents = 13,000,000 * Math.pow(10,18) tokens[0m[31m (948ms)[0m
    [32m  âœ“[0m[90m should have non-zero balance but still less than minimum goal after first successful transaction attempt[0m[31m (349ms)[0m
    [32m  âœ“[0m[90m should move to the second discount tranche when advancing time[0m[31m (183ms)[0m
    [32m  âœ“[0m[90m should allow purchase of 16133 Ether @ 44 cents ~ = 10999772 * Math.pow(10,18) tokens[0m[31m (876ms)[0m
    [32m  âœ“[0m[90m Even though TIME has not elapsed, move to next tranche due to TOKEN CAP per round = (start-round1)/3 ~ = 5500001 * Math.pow(10,18) tokens[0m[31m (881ms)[0m
    [32m  âœ“[0m[90m should NOT move to the third discount tranche when advancing time because we ALREADY advanced due to TOKEN cap[0m[31m (209ms)[0m
[0m    Contract: LOCISale hard cap ETH in wei[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (217ms)[0m
    [32m  âœ“[0m[90m should have the correct hard cap ETH settings[0m
    [32m  âœ“[0m[90m should allow purchase up to the max tokens available & without going over hardCap[0m[31m (897ms)[0m
    [32m  âœ“[0m[90m should have correct weiContributions accounted for[0m[31m (182ms)[0m
    [32m  âœ“[0m[90m should have correct tokens accounted for[0m[31m (115ms)[0m
[0m    Contract: LOCISale inputs with specific tests[0m
    [32m  âœ“[0m[90m should have a peggedETHUSD[0m[31m (79ms)[0m
    [32m  âœ“[0m[90m should have the correct initial settings[0m[31m (368ms)[0m
    [32m  âœ“[0m[90m should have sane discount tranche values[0m[31m (348ms)[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (230ms)[0m
    [32m  âœ“[0m[90m should throw exception when less than minimum contribution[0m[31m (326ms)[0m
    [32m  âœ“[0m[90m should throw exception when less than minimum contribution[0m[31m (319ms)[0m
    [32m  âœ“[0m[90m should allow purchase of 14300 Ether @ 33 cents = 13,000,000 * Math.pow(10,18) tokens[0m[31m (901ms)[0m
    [32m  âœ“[0m[90m should have non-zero balance but still less than minimum goal after first successful transaction attempt[0m[31m (317ms)[0m
    [32m  âœ“[0m[90m should move to the second discount tranche when advancing time[0m[31m (166ms)[0m
    [32m  âœ“[0m[90m should allow purchase of 16133 Ether @ 44 cents ~ = 10999772 * Math.pow(10,18) tokens[0m[31m (884ms)[0m
    [32m  âœ“[0m[90m should move to the third discount tranche when advancing time[0m[31m (237ms)[0m
    [32m  âœ“[0m[90m should allow purchase of 20900 Ether @ 57 cents ~ = 11000000 * Math.pow(10,18) tokens[0m[31m (995ms)[0m
    [32m  âœ“[0m[90m should move to the fourth discount tranche when advancing time[0m[31m (191ms)[0m
    [32m  âœ“[0m[90m should allow purchase of 12000 Ether @ 75 cents ~ = 4800000 * Math.pow(10,18) tokens[0m[31m (922ms)[0m
    [32m  âœ“[0m[90m should stop allowing contributions after the sale end date[0m[31m (198ms)[0m
    [32m  âœ“[0m[90m should have correct weiContributions accounted for[0m[31m (121ms)[0m
    [32m  âœ“[0m[90m should have correct tokens accounted for[0m[31m (138ms)[0m
[0m    Contract: LOCISale inputs with generic tests[0m
    [32m  âœ“[0m[90m should have a peggedETHUSD[0m[31m (101ms)[0m
    [32m  âœ“[0m[90m should have the correct initial settings[0m[31m (137ms)[0m
    [32m  âœ“[0m[90m should have sane discount tranche values[0m[31m (366ms)[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (261ms)[0m
    [32m  âœ“[0m[90m should throw exception when less than minimum contribution[0m[31m (365ms)[0m
    [32m  âœ“[0m[90m should throw exception when less than minimum contribution[0m[31m (371ms)[0m
    [32m  âœ“[0m[90m should cap ether at max individual contribution (refund remaining ether & allocate max contribution # of tokens); verifies first tranche discount[0m[31m (1423ms)[0m
    [32m  âœ“[0m[90m should not allow owner to transfer wei before minimum goal is met[0m[31m (367ms)[0m
    [32m  âœ“[0m[90m should not allow owner to recover unsold tokens before end of sale[0m[31m (361ms)[0m
    [32m  âœ“[0m[90m should have non-zero balance but still less than minimum goal after first successful transaction attempt[0m[31m (337ms)[0m
    [32m  âœ“[0m[90m should move to the second discount tranche when advancing time[0m[31m (185ms)[0m
[0m    Contract: Basics[0m
    [32m  âœ“[0m[90m should have a peggedETHUSD[0m[31m (84ms)[0m
    [32m  âœ“[0m[90m should have the correct initial settings[0m[31m (140ms)[0m
    [32m  âœ“[0m[90m should have sane discount tranche values[0m[31m (263ms)[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (223ms)[0m
    [32m  âœ“[0m[90m should throw exception when less than minimum contribution[0m[31m (324ms)[0m
    [32m  âœ“[0m[90m should cap ether at max individual contribution (refund remaining ether & allocate max contribution # of tokens); verifies first tranche discount[0m[31m (1264ms)[0m
    [32m  âœ“[0m[90m should not allow owner to transfer wei before minimum goal is met[0m[31m (366ms)[0m
    [32m  âœ“[0m[90m should not allow owner to recover unsold tokens before end of sale[0m[31m (349ms)[0m
    [32m  âœ“[0m[90m should have non-zero balance but still less than minimum goal after first successful transaction attempt[0m[31m (317ms)[0m
    [32m  âœ“[0m[90m should move to the second discount tranche when advancing time[0m[31m (161ms)[0m
    [32m  âœ“[0m[90m should prevent any further contribution from someone who has hit their max limit[0m[31m (177ms)[0m
    [32m  âœ“[0m[90m should allow minimum individual contribution; verifies second tranche discount[0m[31m (1307ms)[0m
    [32m  âœ“[0m[90m should revert to zero discount after all tranche end dates have been passed[0m[31m (1344ms)[0m
    [32m  âœ“[0m[90m should approach minimum goal without exceeding[0m[31m (758ms)[0m
    [32m  âœ“[0m[90m should equal minimum goal[0m[31m (706ms)[0m
    [32m  âœ“[0m[90m should allow owner to transfer wei after minimum goal is met[0m[31m (369ms)[0m
    [32m  âœ“[0m[90m should not allow owner to transfer wei to invalid addresses[0m[31m (363ms)[0m
    [32m  âœ“[0m[90m should not allow owner to recover unsold tokens to invalid addresses[0m[31m (97ms)[0m
    [32m  âœ“[0m[90m should exceed minimum goal[0m[31m (737ms)[0m
    [32m  âœ“[0m[90m should stop allowing contributions after the sale end date[0m[31m (180ms)[0m
    [32m  âœ“[0m[90m should allow ether top-up after the sale end date[0m[31m (334ms)[0m
[0m    Contract: Goal met, no minimum[0m
    [32m  âœ“[0m[90m should have the correct initial settings[0m[31m (143ms)[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (210ms)[0m
    [32m  âœ“[0m[90m should allow a contribution[0m[31m (807ms)[0m
    [32m  âœ“[0m[90m should not allow token recovery before end of sale[0m[33m (69ms)[0m
    [32m  âœ“[0m[90m should not allow wei withdrawal by non-owner[0m
    [32m  âœ“[0m[90m should allow wei withdrawal by owner at any time (because there is no minimum goal)[0m[31m (630ms)[0m
    [32m  âœ“[0m[90m should not allow wei withdrawal by non-owner after sale end data either[0m[33m (48ms)[0m
    [32m  âœ“[0m[90m should not allow token recovery by non-owner[0m[33m (56ms)[0m
    [32m  âœ“[0m[90m should not allow token recovery to an invalid address (token address or 0x0)[0m[33m (64ms)[0m
    [32m  âœ“[0m[90m should allow wei withdrawal by owner after sale end date[0m[31m (619ms)[0m
    [32m  âœ“[0m[90m should allow owner token recovery after end of sale[0m[31m (116ms)[0m
[0m    Contract: Goal met, no minimum, refunding prorata[0m
    [32m  âœ“[0m[90m should have the correct initial settings[0m[31m (119ms)[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (226ms)[0m
    [32m  âœ“[0m[90m should allow contributions[0m[31m (1911ms)[0m
    [32m  âœ“[0m[90m should allow wei withdrawal by owner at any time (because there is no minimum goal)[0m[31m (649ms)[0m
    [32m  âœ“[0m[90m should prevent enabling refunding without pausing or being after end of sale[0m[33m (53ms)[0m
    [32m  âœ“[0m[90m should prevent pausing if non-owner[0m[33m (42ms)[0m
    [32m  âœ“[0m[90m should allow pausing sale[0m[33m (57ms)[0m
    [32m  âœ“[0m[90m should not allow any contributions after pausing[0m[31m (493ms)[0m
    [32m  âœ“[0m[90m should allow enabling refunding after pausing sale[0m[31m (307ms)[0m
    [32m  âœ“[0m[90m should prevent pausing if already paused[0m[33m (53ms)[0m
    [32m  âœ“[0m[90m should not allow any contributions while refunding and paused[0m[31m (454ms)[0m
    [32m  âœ“[0m[90m should prevent unpausing if non-owner[0m[33m (39ms)[0m
    [32m  âœ“[0m[90m should not allow any contributions while refunding, even after unpausing[0m[31m (507ms)[0m
    [32m  âœ“[0m[90m should have proper token and eth balances for participants after refunding complete[0m[31m (2980ms)[0m
[0m    Contract: Goal not met, refunding[0m
    [32m  âœ“[0m[90m should have the correct initial settings[0m[31m (118ms)[0m
    [32m  âœ“[0m[90m should have the correct token balance after initial token transfer[0m[31m (244ms)[0m
    [32m  âœ“[0m[90m should remain below minimal goal after insufficient ether contributions[0m[31m (2280ms)[0m
    [32m  âœ“[0m[90m should prevent enabling refunding without pausing or being after end of sale[0m[33m (51ms)[0m
    [32m  âœ“[0m[90m should stop allowing contributions after the sale end date[0m[31m (186ms)[0m
    [32m  âœ“[0m[90m should allow ether top-up after the sale end date and before enabling refunds[0m[31m (325ms)[0m
    [32m  âœ“[0m[90m should allow refunding when minimum goal not met[0m[31m (237ms)[0m
    [32m  âœ“[0m[90m should prevent enabling refunding a second time[0m[33m (59ms)[0m
    [32m  âœ“[0m[90m should throw exception if invalid sale address is used by valid contributor[0m[33m (44ms)[0m
    [32m  âœ“[0m[90m should prevent non-contributor from getting ether from the refund process[0m[33m (41ms)[0m
    [32m  âœ“[0m[90m should allow contributor to get ether from the refund process in exchange for their tokens[0m[31m (1016ms)[0m
    [32m  âœ“[0m[90m should prevent already-refunded contributors from requesting refund again[0m
    [32m  âœ“[0m[90m should have proper token and eth balances for participants after refunding complete[0m[31m (1429ms)[0m

[0m  Contract: Token Tests[0m
  [32m  âœ“[0m[90m should have the owner account set correctly[0m
  [32m  âœ“[0m[90m should have blank name and symbol[0m[33m (60ms)[0m
  [32m  âœ“[0m[90m should have correct totalSupply[0m
  [32m  âœ“[0m[90m should put correct # of Token in the owner account[0m
  [32m  âœ“[0m[90m should add an account as an override address[0m[31m (199ms)[0m
  [32m  âœ“[0m[90m should successfully transfer tokens from owner account before ownerActivateToken[0m[31m (156ms)[0m
  [32m  âœ“[0m[90m should successfully transfer tokens from an override account before ownerActivateToken[0m[31m (129ms)[0m
  [32m  âœ“[0m[90m should fail to transfer tokens from non-owner/non-override account before ownerActivateToken[0m[33m (41ms)[0m
  [32m  âœ“[0m[90m should fail to approve token transfer from non-owner/non-override account before ownerActivateToken[0m
  [32m  âœ“[0m[90m should approve token transfer from owner/override account before ownerActivateToken[0m[31m (173ms)[0m
  [32m  âœ“[0m[90m should be allowed to transferFrom successfully an approved amount from a non owner/override account[0m[31m (143ms)[0m
  [32m  âœ“[0m[90m should throw when calling ownerActivateToken without ownerSetVisible[0m
  [32m  âœ“[0m[90m should have blank symbol and token before, and be set after ownerSetVisible[0m[31m (144ms)[0m
  [32m  âœ“[0m[90m should be inactive before, and be active after ownerActivateToken[0m[33m (72ms)[0m
  [32m  âœ“[0m[90m non-owner account should transfer token correctly after ownerActivateToken[0m[31m (87ms)[0m
  [32m  âœ“[0m[90m should fail to transfer tokens to 0x0 or the token's address[0m[33m (50ms)[0m


[92m [0m[32m 120 passing[0m[90m (1m)[0m

